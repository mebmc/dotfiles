# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# add an on_enter command to the default mode
# :: default : chunkc border::color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

# hyper - t : open -na /Applications/Alacritty.app
# hyper - s : yabai -m window --focus $(yabai -m query --windows | jq 'map(select(.app=="Safari")) | .[0].id')
# hyper - d : yabai -m window --focus $(yabai -m query --windows | jq 'map(select(.app=="Alacritty")) | .[0].id')
# hyper - f : yabai -m window --focus $(yabai -m query --windows | jq 'map(select(.app=="Firefox")) | .[0].id')
# hyper - c : yabai -m window --focus $(yabai -m query --windows | jq 'map(select(.app=="Microsoft Teams")) | .[0].id')
# hyper - b : yabai -m window --focus $(yabai -m query --windows | jq 'map(select(.app=="Brave")) | .[0].id')
# hyper - m : yabai -m window --focus $(yabai -m query --windows | jq 'map(select(.app=="Music")) | .[0].id')

ctrl - u [
        "Fiery Feeds" : skhd -k 'pageup'
]

ctrl - d [
        "Fiery Feeds" : skhd -k 'pagedown'
]


# focus window
# for left/right: if it fails becaus this was the west-most/east-most window, try to switch displays
# this will make cmd -h/l work seamlessly over multiple monitors
alt + lctrl + cmd - h : yabai -m window --focus west || yabai -m display --focus west
alt + lctrl + cmd - l : yabai -m window --focus east || yabai -m display --focus east

# for up/down: try to switch focus in a stack first, if this fails (because there is no stack or because we are at the topmost or last element of the stack) focus the north/south window
alt + lctrl + cmd - j : yabai -m window --focus stack.next || yabai -m window --focus south
alt + lctrl + cmd - k : yabai -m window --focus stack.prev || yabai -m window --focus north

# move managed window
meh - h : yabai -m window --warp west || yabai -m window --display west
meh - l : yabai -m window --warp east || yabai -m window --display east
meh - j : yabai -m window --warp south
meh - k : yabai -m window --warp north

# displays
alt + lctrl + cmd - w: yabai -m display --focus west
alt + lctrl + cmd - e: yabai -m display --focus east
meh - w: yabai -m window --display west
meh - e: yabai -m window --display east

# spaces
# alt + lctrl + cmd - 1 : yabai -m space --focus 1 || yabai -m space --focus recent;
# alt + lctrl + cmd - 2 : yabai -m space --focus 2 || yabai -m space --focus recent;
# alt + lctrl + cmd - 3 : yabai -m space --focus 3 || yabai -m space --focus recent;
# alt + lctrl + cmd - 4 : yabai -m space --focus 4 || yabai -m space --focus recent;
# alt + lctrl + cmd - 5 : yabai -m space --focus 5 || yabai -m space --focus recent;
# alt + lctrl + cmd - 6 : yabai -m space --focus 6 || yabai -m space --focus recent;
# alt + lctrl + cmd - 7 : yabai -m space --focus 7 || yabai -m space --focus recent;
# alt + lctrl + cmd - 8 : yabai -m space --focus 8 || yabai -m space --focus recent;
# alt + lctrl + cmd - 9 : yabai -m space --focus 9 || yabai -m space --focus recent;
# alt + lctrl + cmd - 0 : yabai -m space --focus 10 || yabai -m space --focus recent;

# send window to desktop and follow focus
meh - 1 : yabai -m window --space 1
meh - 2 : yabai -m window --space 2
meh - 3 : yabai -m window --space 3
meh - 4 : yabai -m window --space 4
meh - 5 : yabai -m window --space 5
meh - 6 : yabai -m window --space 6
meh - 7 : yabai -m window --space 7
meh - 8 : yabai -m window --space 8
meh - 9 : yabai -m window --space 9
meh - 0 : yabai -m window --space 10

alt + lctrl + cmd - q : yabai -m window --minimize && yabai -m window --focus south
alt + lctrl + cmd - w : yabai -m window --deminimize
alt + lctrl + cmd + shift - q : yabai -m window --close # && yabai -m window --focus south

# Set insertion point for focused container
shift + lctrl + cmd - h : yabai -m window --insert west
shift + lctrl + cmd - j : yabai -m window --insert south
shift + lctrl + cmd - k : yabai -m window --insert north
shift + lctrl + cmd - l : yabai -m window --insert east

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# toggle fullscreen
alt + lctrl + cmd - f : yabai -m window --toggle zoom-fullscreen
meh - g : yabai -m window --toggle native-fullscreen

# toggle window split type
alt + lctrl + cmd - s : yabai -m window --toggle split

# float / unfloat window and center on screen
alt + lctrl + cmd - t : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
alt + lctrl + cmd - p : yabai -m window --toggle sticky;\
           yabai -m window --toggle topmost;\
           yabai -m window --toggle pip


# Restart yabai
meh - z : /usr/bin/env osascript <<< \
        "display notification \"Restarting Yabai\" with title \"Yabai\""; \
        yabai --restart-service

# Stacking windows
alt + lctrl + cmd - g : yabai -m window --stack east || yabai -m window --stack west
alt + lctrl + cmd - b : yabai -m window --stack south || yabai -m window --stack north
alt + lctrl + cmd - d : yabai -m config layout bsp


# Resize windows
meh - left : yabai -m window --resize left:-100:0; \
                  yabai -m window --resize right:-100:0
meh - down : yabai -m window --resize bottom:0:100; \
                  yabai -m window --resize top:0:100
meh - up : yabai -m window --resize top:0:-100; \
                  yabai -m window --resize bottom:0:-100
meh - right : yabai -m window --resize right:100:0; \
                  yabai -m window --resize left:100:0
